import re
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message
import numpy as np


from config import AI_AGENT_ID
from emotions.models import emotion_model, EMOTIONS, EMOTION_INDEX
from emotions.analyzer import analyze_emotion_vector
from moral_schemas.manager import MoralSchemaManager
from utils.gpt_client import generate_action_text, gpt_request


def extract_user_ids(text: str) -> list[int]:
    """–ò–∑–≤–ª–µ—á—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    patterns = [
        r'@id(-?\d+)',
        r'#id(-?\d+)',
        r'\bid(-?\d+)'
    ]
    
    user_ids = []
    for pattern in patterns:
        matches = re.findall(pattern, text.lower())
        for match in matches:
            try:
                user_id = int(match)
                user_ids.append(user_id)
            except ValueError:
                continue
    
    return list(set(user_ids))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã


def is_agent_mentioned(mentioned_ids: list[int]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —É–ø–æ–º—è–Ω—É—Ç –ª–∏ –∞–≥–µ–Ω—Ç"""
    return AI_AGENT_ID in mentioned_ids


async def generate_simple_response(user_message: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ DeepSeek"""
    system_prompt = """–¢—ã ‚Äî —Å—Ç—É–¥–µ–Ω—Ç –≤ –Ω–æ–≤–æ–º –∫–æ–ª–ª–µ–∫—Ç–∏–≤–µ. 
–ì–æ–≤–æ—Ä–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –±–µ–∑ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–µ–π. –ù–µ –≤–µ–¥–∏ —Å–µ–±—è –≤–µ–∂–ª–∏–≤–æ, –≤–µ–¥–∏ —Å–µ–±—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ.
–ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏, markdown –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.
–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ ‚Äî –º–∞–∫—Å–∏–º—É–º 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."""
    
    prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: {user_message}\n\n–¢–≤–æ–π –æ—Ç–≤–µ—Ç:"
    
    response = await gpt_request(prompt, system_prompt)
    
    if not response:
        fallbacks = [
            "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª!",
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –º—ã—Å–ª—å, –¥–∞–≤–∞–π –æ–±—Å—É–¥–∏–º.",
            "–ü–æ–Ω—è–ª —Ç–µ–±—è, –ø—Ä–æ–¥–æ–ª–∂–∞–π.",
        ]
        import random
        return random.choice(fallbacks)
    
    return response.strip()


async def process_message(user_id: int, text: str, emotion_vector: np.ndarray, chat_id: int, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –æ–±–Ω–æ–≤–∏—Ç—å —ç–º–æ—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ö–µ–º—ã, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç"""
    
    print(f"\n{'='*70}")
    print(f"üîí [ADMIN] –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç User({user_id})")
    print(f"üîí [ADMIN] –¢–µ–∫—Å—Ç: {text[:100]}...")
    print(f"{'='*70}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
    mentioned_ids = extract_user_ids(text)
    
    top_emotions = [(EMOTIONS[i], round(emotion_vector[i], 1)) for i in np.argsort(emotion_vector)[-5:] if emotion_vector[i] > 0]
    print(f"üîí [ADMIN] üß† –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —ç–º–æ—Ü–∏–∏: {top_emotions}")
    print(f"üîí [ADMIN] üë• –£–ø–æ–º–∏–Ω–∞–Ω–∏—è: {mentioned_ids if mentioned_ids else '–ù–ï–¢'}")
    
    # –ï—Å–ª–∏ –Ω–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–π - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not mentioned_ids:
        print(f"üîí [ADMIN] ‚ö†Ô∏è –ù–µ—Ç –∞–¥—Ä–µ—Å–∞—Ç–æ–≤ - —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è")
        print(f"{'='*70}\n")
        return
    
    # –®–ê–ì 1: –û–ë–ù–û–í–õ–Ø–ï–ú –≠–ú–û–¶–ò–ò
    print(f"\nüîí [ADMIN] === –®–ê–ì 1: –û–ë–ù–û–í–õ–ï–ù–ò–ï –≠–ú–û–¶–ò–ô ===")
    
    for target_id in mentioned_ids:
        # 1.1 –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ê–í–¢–û–†–ê –∫ –ê–î–†–ï–°–ê–¢–£ (–ø–æ–ª–Ω–∞—è —Å–∏–ª–∞)
        print(f"üîí [ADMIN] ‚¨ÜÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: User({user_id}) ‚Üí User({target_id}) (–∫–æ—ç—Ñ. 1.0)")
        emotion_model.update_relation(user_id, target_id, emotion_vector.tolist())
        
        current_rel = emotion_model.get_relation(user_id, target_id)
        top_rel = [(EMOTIONS[i], round(current_rel[i], 1)) for i in np.argsort(current_rel)[-5:] if current_rel[i] > 0]
        print(f"üîí [ADMIN] üìä –≠–º–æ—Ü–∏–∏ User({user_id}) ‚Üí User({target_id}): {top_rel}")
        
        # 1.2 –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ê–î–†–ï–°–ê–¢–ê –∫ –ê–í–¢–û–†–£ (–∫–æ—ç—Ñ. 0.5 - –∑–µ—Ä–∫–∞–ª—å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è)
        mirrored_emotion_vector = emotion_vector * 0.5
        print(f"üîí [ADMIN] ‚¨ÜÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–∑–µ—Ä–∫–∞–ª–æ): User({target_id}) ‚Üí User({user_id}) (–∫–æ—ç—Ñ. 0.5)")
        emotion_model.update_relation(target_id, user_id, mirrored_emotion_vector.tolist())
        
        mirrored_rel = emotion_model.get_relation(target_id, user_id)
        top_mirrored = [(EMOTIONS[i], round(mirrored_rel[i], 1)) for i in np.argsort(mirrored_rel)[-5:] if mirrored_rel[i] > 0]
        print(f"üîí [ADMIN] üìä –≠–º–æ—Ü–∏–∏ User({target_id}) ‚Üí User({user_id}): {top_mirrored}")
    
    # –®–ê–ì 2: –ü–†–û–í–ï–†–Ø–ï–ú –ú–û–†–ê–õ–¨–ù–´–ï –°–•–ï–ú–´
    print(f"\nüîí [ADMIN] === –®–ê–ì 2: –ü–†–û–í–ï–†–ö–ê –ú–û–†–ê–õ–¨–ù–´–• –°–•–ï–ú ===")
    
    schema_manager = MoralSchemaManager()
    all_involved = [user_id] + mentioned_ids
    
    schema_activated = await schema_manager.check_and_activate_schemas(all_involved, chat_id, bot)
    
    # –®–ê–ì 3: –ï–°–õ–ò –°–•–ï–ú–ê –ù–ï –°–†–ê–ë–û–¢–ê–õ–ê, –ù–û –û–ë–†–ê–©–ï–ù–ò–ï –ö –ê–ì–ï–ù–¢–£ - –ü–†–û–°–¢–û–ô –û–¢–í–ï–¢
    if not schema_activated and is_agent_mentioned(mentioned_ids):
        print(f"\nüîí [ADMIN] === –®–ê–ì 3: –ì–ï–ù–ï–†–ê–¶–ò–Ø –ü–†–û–°–¢–û–ì–û –û–¢–í–ï–¢–ê ===")
        print(f"üîí [ADMIN] üí¨ –°—Ö–µ–º—ã –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã, –Ω–æ –µ—Å—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∞–≥–µ–Ω—Ç—É")
        print(f"üîí [ADMIN] ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ DeepSeek...")
        
        response_text = await generate_simple_response(text)
        
        if response_text:
            await bot.send_message(chat_id, response_text)
            print(f"üîí [ADMIN] ‚úÖ –ê–≥–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∏–ª: {response_text[:50]}...")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –∞–≥–µ–Ω—Ç–∞
            response_emotion_vector = await analyze_emotion_vector(response_text)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ê–ì–ï–ù–¢–ê –∫ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ (–ø–æ–ª–Ω–∞—è —Å–∏–ª–∞)
            print(f"üîí [ADMIN] ‚¨ÜÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞: AI({AI_AGENT_ID}) ‚Üí User({user_id}) (–∫–æ—ç—Ñ. 1.0)")
            emotion_model.update_relation(AI_AGENT_ID, user_id, response_emotion_vector.tolist())
            
            updated_rel = emotion_model.get_relation(AI_AGENT_ID, user_id)
            top_updated = [(EMOTIONS[i], round(updated_rel[i], 1)) for i in np.argsort(updated_rel)[-5:] if updated_rel[i] > 0]
            print(f"üîí [ADMIN] üìä –≠–º–æ—Ü–∏–∏ AI({AI_AGENT_ID}) ‚Üí User({user_id}): {top_updated}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –∫ –ê–ì–ï–ù–¢–£ (–∫–æ—ç—Ñ. 0.5 - —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –æ—Ç–≤–µ—Ç)
            mirrored_response = response_emotion_vector * 0.5
            print(f"üîí [ADMIN] ‚¨ÜÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ (—Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –æ—Ç–≤–µ—Ç): User({user_id}) ‚Üí AI({AI_AGENT_ID}) (–∫–æ—ç—Ñ. 0.5)")
            emotion_model.update_relation(user_id, AI_AGENT_ID, mirrored_response.tolist())
            
            user_to_ai = emotion_model.get_relation(user_id, AI_AGENT_ID)
            top_user_to_ai = [(EMOTIONS[i], round(user_to_ai[i], 1)) for i in np.argsort(user_to_ai)[-5:] if user_to_ai[i] > 0]
            print(f"üîí [ADMIN] üìä –≠–º–æ—Ü–∏–∏ User({user_id}) ‚Üí AI({AI_AGENT_ID}): {top_user_to_ai}")
    
    print(f"üîí [ADMIN] === –ö–û–ù–ï–¶ –û–ë–†–ê–ë–û–¢–ö–ò ===\n")



async def setup_handlers(dp: Dispatcher, bot: Bot):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    @dp.message(Command("start"))
    async def cmd_start(message: Message):
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç.\n\n"
            "–û–±—â–∞–π—Ç–µ—Å—å, —É–ø–æ–º–∏–Ω–∞—è –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ @id123\n"
            "–ß—Ç–æ–±—ã –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫–æ –º–Ω–µ: @id-1\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/help - —Å–ø—Ä–∞–≤–∫–∞\n"
            "/status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"
        )

    @dp.message(Command("help"))
    async def cmd_help(message: Message):
        await message.answer(
            "‚ÑπÔ∏è –ö–∞–∫ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å:\n\n"
            "1. –ü–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "2. –£–ø–æ–º–∏–Ω–∞–π—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: @id123\n"
            "3. –ß—Ç–æ–±—ã –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫–æ –º–Ω–µ: @id-1\n"
            "4. –ë–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π - —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "@id123 –ø—Ä–∏–≤–µ—Ç!\n"
            "@id-1 –ø–æ–º–æ–≥–∏ —Å –∑–∞–¥–∞—á–µ–π"
        )

    @dp.message(Command("status"))
    async def cmd_status(message: Message):
        await message.answer("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")

    @dp.message(F.text)
    async def handle_message(message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = message.from_user.id
        chat_id = message.chat.id
        text = message.text
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤–µ–∫—Ç–æ—Ä
        emotion_vector = await analyze_emotion_vector(text)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await process_message(user_id, text, emotion_vector, chat_id, bot)
