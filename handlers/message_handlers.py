import re
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message
import numpy as np

from config import AI_AGENT_VIRTUAL_ID, AI_AGENT_REAL_ID, ADMIN_ID
from emotions.models import emotion_model, EMOTIONS, EMOTION_INDEX
from emotions.analyzer import analyze_emotion_vector
from moral_schemas.manager import MoralSchemaManager
from utils.gpt_client import gpt_request
from database.chat_db import chat_db
from emotions.analyzer import analyze_emotions_per_target

def extract_virtual_ids(text: str) -> list[int]:
    """–ò–∑–≤–ª–µ—á—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ ID –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    patterns = [
        r'@id(\d+)',
        r'#id(\d+)',
        r'\bid(\d+)'
    ]
    
    virtual_ids = []
    for pattern in patterns:
        matches = re.findall(pattern, text.lower())
        for match in matches:
            try:
                virtual_id = int(match)
                virtual_ids.append(virtual_id)
            except ValueError:
                continue
    
    return list(set(virtual_ids))


async def generate_simple_response(user_message: str, sender_virtual_id: int) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ DeepSeek"""
    system_prompt = """–¢—ã ‚Äî —Å—Ç—É–¥–µ–Ω—Ç –≤ –Ω–æ–≤–æ–º –∫–æ–ª–ª–µ–∫—Ç–∏–≤–µ. 
–ì–æ–≤–æ—Ä–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –±–µ–∑ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–µ–π. –ù–µ –≤–µ–¥–∏ —Å–µ–±—è –≤–µ–∂–ª–∏–≤–æ, –≤–µ–¥–∏ —Å–µ–±—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ.
–ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏, markdown –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.
–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ ‚Äî –º–∞–∫—Å–∏–º—É–º 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."""
    
    prompt = f"–£—á–∞—Å—Ç–Ω–∏–∫ {sender_virtual_id} –Ω–∞–ø–∏—Å–∞–ª: {user_message}\n\n–¢–≤–æ–π –æ—Ç–≤–µ—Ç:"
    
    response = await gpt_request(prompt, system_prompt)
    
    if not response:
        fallbacks = [
            "–ü–æ–Ω—è–ª, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ.",
            "–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –æ–±—Å—É–¥–∏–º.",
            "–û–∫–µ–π, –ø—Ä–æ–¥–æ–ª–∂–∞–π.",
        ]
        import random
        return random.choice(fallbacks)
    
    return response.strip()


async def broadcast_message(sender_virtual_id: int, text: str, bot: Bot, exclude_ids: list = None):
    """–†–∞–∑–æ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —á–∞—Ç–∞"""
    participants = chat_db.get_all_participants()
    
    message_text = f"üí¨ [ID {sender_virtual_id}]: {text}"
    
    if exclude_ids is None:
        exclude_ids = []
    
    for participant in participants:
        # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
        if participant["virtual_id"] == sender_virtual_id:
            continue
        
        # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã–º
        if participant["virtual_id"] in exclude_ids:
            continue
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç–∞ (–æ–Ω –Ω–µ —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ Telegram)
        if participant["virtual_id"] == AI_AGENT_VIRTUAL_ID:
            continue
        
        try:
            await bot.send_message(participant["telegram_id"], message_text)
        except Exception as e:
            print(f"üîí [ADMIN] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫—É {participant['telegram_id']}: {e}")


async def process_message(sender_telegram_id: int, text: str, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º —á–∞—Ç–µ"""
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    sender_virtual_id = chat_db.get_virtual_id(sender_telegram_id)
    
    if not sender_virtual_id:
        print(f"üîí [ADMIN] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {sender_telegram_id} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        return
    
    print(f"\n{'='*70}")
    print(f"üîí [ADMIN] –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Virtual ID {sender_virtual_id} (Telegram {sender_telegram_id})")
    print(f"üîí [ADMIN] –¢–µ–∫—Å—Ç: {text[:100]}...")
    print(f"{'='*70}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è (–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ ID)
    mentioned_virtual_ids = extract_virtual_ids(text)
    
    print(f"üîí [ADMIN] üë• –£–ø–æ–º–∏–Ω–∞–Ω–∏—è (–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ ID): {mentioned_virtual_ids if mentioned_virtual_ids else '–ù–ï–¢'}")
    
    # –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
    await broadcast_message(sender_virtual_id, text, bot)
    
    # –ï—Å–ª–∏ –Ω–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–π - —Ç–æ–ª—å–∫–æ —Ä–∞—Å—Å—ã–ª–∫–∞, –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏–π
    if not mentioned_virtual_ids:
        print(f"üîí [ADMIN] ‚ö†Ô∏è –ù–µ—Ç –∞–¥—Ä–µ—Å–∞—Ç–æ–≤ - —Ç–æ–ª—å–∫–æ —Ä–∞—Å—Å—ã–ª–∫–∞")
        print(f"{'='*70}\n")
        return
    
    # –ù–û–í–û–ï: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–ø–æ–º—è–Ω—É—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    print(f"üîí [ADMIN] üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —ç–º–æ—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞...")
    emotions_per_target = await analyze_emotions_per_target(text, mentioned_virtual_ids)
    
    # –®–ê–ì 1: –û–ë–ù–û–í–õ–Ø–ï–ú –≠–ú–û–¶–ò–ò (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ ID)
    print(f"\nüîí [ADMIN] === –®–ê–ì 1: –û–ë–ù–û–í–õ–ï–ù–ò–ï –≠–ú–û–¶–ò–ô (–ö–û–ù–¢–ï–ö–°–¢–ù–û) ===")
    
    for target_virtual_id in mentioned_virtual_ids:
        # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤–µ–∫—Ç–æ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ target_id
        emotion_vector = emotions_per_target.get(target_virtual_id, np.zeros(len(EMOTIONS)))
        
        top_emotions = [(EMOTIONS[i], round(emotion_vector[i], 1)) 
                       for i in np.argsort(emotion_vector)[-5:] if emotion_vector[i] > 0]
        
        print(f"üîí [ADMIN] üéØ –≠–º–æ—Ü–∏–∏ –∫ ID {target_virtual_id}: {top_emotions}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ê–í–¢–û–†–ê –∫ –ê–î–†–ï–°–ê–¢–£
        print(f"üîí [ADMIN] ‚¨ÜÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: Virtual ID {sender_virtual_id} ‚Üí Virtual ID {target_virtual_id} (–∫–æ—ç—Ñ. 1.0)")
        emotion_model.update_relation(sender_virtual_id, target_virtual_id, emotion_vector.tolist())
        
        current_rel = emotion_model.get_relation(sender_virtual_id, target_virtual_id)
        top_rel = [(EMOTIONS[i], round(current_rel[i], 1)) 
                  for i in np.argsort(current_rel)[-5:] if current_rel[i] > 0]
        print(f"üîí [ADMIN] üìä –≠–º–æ—Ü–∏–∏ Virtual ID {sender_virtual_id} ‚Üí Virtual ID {target_virtual_id}: {top_rel}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ê–î–†–ï–°–ê–¢–ê –∫ –ê–í–¢–û–†–£ (–∑–µ—Ä–∫–∞–ª—å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è)
        mirrored_emotion_vector = emotion_vector * 0.5
        print(f"üîí [ADMIN] ‚¨ÜÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–∑–µ—Ä–∫–∞–ª–æ): Virtual ID {target_virtual_id} ‚Üí Virtual ID {sender_virtual_id} (–∫–æ—ç—Ñ. 0.5)")
        emotion_model.update_relation(target_virtual_id, sender_virtual_id, mirrored_emotion_vector.tolist())
        
        mirrored_rel = emotion_model.get_relation(target_virtual_id, sender_virtual_id)
        top_mirrored = [(EMOTIONS[i], round(mirrored_rel[i], 1)) 
                       for i in np.argsort(mirrored_rel)[-5:] if mirrored_rel[i] > 0]
        print(f"üîí [ADMIN] üìä –≠–º–æ—Ü–∏–∏ Virtual ID {target_virtual_id} ‚Üí Virtual ID {sender_virtual_id}: {top_mirrored}")
    
    # –®–ê–ì 2: –ü–†–û–í–ï–†–Ø–ï–ú –ú–û–†–ê–õ–¨–ù–´–ï –°–•–ï–ú–´
    print(f"\nüîí [ADMIN] === –®–ê–ì 2: –ü–†–û–í–ï–†–ö–ê –ú–û–†–ê–õ–¨–ù–´–• –°–•–ï–ú ===")
    
    schema_manager = MoralSchemaManager()
    all_involved_virtual_ids = [sender_virtual_id] + mentioned_virtual_ids
    all_participants = chat_db.get_all_participants()
    
    schema_activated = await schema_manager.check_and_activate_schemas(
        all_involved_virtual_ids, all_participants, bot
    )
    
    # –®–ê–ì 3: –ï–°–õ–ò –°–•–ï–ú–ê –ù–ï –°–†–ê–ë–û–¢–ê–õ–ê, –ù–û –û–ë–†–ê–©–ï–ù–ò–ï –ö –ê–ì–ï–ù–¢–£ - –ü–†–û–°–¢–û–ô –û–¢–í–ï–¢
    if not schema_activated and AI_AGENT_VIRTUAL_ID in mentioned_virtual_ids:
        print(f"\nüîí [ADMIN] === –®–ê–ì 3: –ì–ï–ù–ï–†–ê–¶–ò–Ø –ü–†–û–°–¢–û–ì–û –û–¢–í–ï–¢–ê –ê–ì–ï–ù–¢–ê ===")
        print(f"üîí [ADMIN] üí¨ –°—Ö–µ–º—ã –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã, –Ω–æ –µ—Å—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∞–≥–µ–Ω—Ç—É (ID {AI_AGENT_VIRTUAL_ID})")
        print(f"üîí [ADMIN] ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ DeepSeek...")
        
        response_text = await generate_simple_response(text, sender_virtual_id)
        
        if response_text:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º (–∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ)
            await broadcast_message(AI_AGENT_VIRTUAL_ID, response_text, bot)
            print(f"üîí [ADMIN] ‚úÖ –ê–≥–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∏–ª: {response_text[:50]}...")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –∞–≥–µ–Ω—Ç–∞
            response_emotion_vector = await analyze_emotion_vector(response_text)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ê–ì–ï–ù–¢–ê –∫ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ
            print(f"üîí [ADMIN] ‚¨ÜÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞: Virtual ID {AI_AGENT_VIRTUAL_ID} ‚Üí Virtual ID {sender_virtual_id} (–∫–æ—ç—Ñ. 1.0)")
            emotion_model.update_relation(AI_AGENT_VIRTUAL_ID, sender_virtual_id, response_emotion_vector.tolist())
            
            updated_rel = emotion_model.get_relation(AI_AGENT_VIRTUAL_ID, sender_virtual_id)
            top_updated = [(EMOTIONS[i], round(updated_rel[i], 1)) 
                          for i in np.argsort(updated_rel)[-5:] if updated_rel[i] > 0]
            print(f"üîí [ADMIN] üìä –≠–º–æ—Ü–∏–∏ Virtual ID {AI_AGENT_VIRTUAL_ID} ‚Üí Virtual ID {sender_virtual_id}: {top_updated}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –∫ –ê–ì–ï–ù–¢–£ (—Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –æ—Ç–≤–µ—Ç)
            mirrored_response = response_emotion_vector * 0.5
            print(f"üîí [ADMIN] ‚¨ÜÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ (—Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –æ—Ç–≤–µ—Ç): Virtual ID {sender_virtual_id} ‚Üí Virtual ID {AI_AGENT_VIRTUAL_ID} (–∫–æ—ç—Ñ. 0.5)")
            emotion_model.update_relation(sender_virtual_id, AI_AGENT_VIRTUAL_ID, mirrored_response.tolist())
            
            user_to_ai = emotion_model.get_relation(sender_virtual_id, AI_AGENT_VIRTUAL_ID)
            top_user_to_ai = [(EMOTIONS[i], round(user_to_ai[i], 1)) 
                             for i in np.argsort(user_to_ai)[-5:] if user_to_ai[i] > 0]
            print(f"üîí [ADMIN] üìä –≠–º–æ—Ü–∏–∏ Virtual ID {sender_virtual_id} ‚Üí Virtual ID {AI_AGENT_VIRTUAL_ID}: {top_user_to_ai}")
    
    print(f"üîí [ADMIN] === –ö–û–ù–ï–¶ –û–ë–†–ê–ë–û–¢–ö–ò ===\n")



async def setup_handlers(dp: Dispatcher, bot: Bot):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    @dp.message(Command("start"))
    async def cmd_start(message: Message):
        user_id = message.from_user.id
        username = message.from_user.username or message.from_user.first_name
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        virtual_id = chat_db.register_participant(user_id, username)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants = chat_db.get_all_participants()
        participant_list = "\n".join([
            f"  ‚Ä¢ ID {p['virtual_id']}"
            for p in participants
        ])
        
        await message.answer(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —á–∞—Ç!\n\n"
            f"üÜî –í–∞—à ID: {virtual_id}\n\n"
            f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞:\n{participant_list}\n\n"
            f"üí° –ß—Ç–æ–±—ã –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∫–æ–º—É-—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ @id –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏\n"
            f"–ü—Ä–∏–º–µ—Ä: @id3 –ø—Ä–∏–≤–µ—Ç!\n\n"
            f"üìù –í—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –≤–∏–¥–Ω—ã –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —á–∞—Ç–∞.\n\n"
            f"–ö–æ–º–∞–Ω–¥—ã:\n"
            f"/help - —Å–ø—Ä–∞–≤–∫–∞\n"
            f"/participants - —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
        )
    
    @dp.message(Command("help"))
    async def cmd_help(message: Message):
        user_id = message.from_user.id
        virtual_id = chat_db.get_virtual_id(user_id)
        
        if not virtual_id:
            await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        await message.answer(
            f"‚ÑπÔ∏è –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º —á–∞—Ç–æ–º:\n\n"
            f"1. –ü–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –æ–Ω–∏ –≤–∏–¥–Ω—ã –≤—Å–µ–º\n"
            f"2. –£–ø–æ–º–∏–Ω–∞–π—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: @id3\n"
            f"3. –ë–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤—Å–µ–º\n\n"
            f"–ü—Ä–∏–º–µ—Ä—ã:\n"
            f"‚Ä¢ –ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! (–≤–∏–¥—è—Ç –≤—Å–µ)\n"
            f"‚Ä¢ @id3 –∫–∞–∫ –¥–µ–ª–∞? (–≤–∏–¥—è—Ç –≤—Å–µ, –Ω–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ ID 3)\n\n"
            f"–ö–æ–º–∞–Ω–¥—ã:\n"
            f"/participants - —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
            f"/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫"
        )
    
    @dp.message(Command("participants"))
    async def cmd_participants(message: Message):
        user_id = message.from_user.id
        
        if not chat_db.is_participant(user_id):
            await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        participants = chat_db.get_all_participants()
        participant_list = "\n".join([
            f"  ‚Ä¢ ID {p['virtual_id']}"
            for p in participants
        ])
        
        await message.answer(
            f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —á–∞—Ç–∞:\n{participant_list}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @id –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ —É—á–∞—Å—Ç–Ω–∏–∫—É"
        )
    
    @dp.message(F.text)
    async def handle_message(message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = message.from_user.id
        text = message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        if not chat_db.is_participant(user_id):
            await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —á–∞—Ç")
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await process_message(user_id, text, bot)
