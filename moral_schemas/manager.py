import numpy as np
from typing import Dict, List, Optional, Tuple
from aiogram import Bot
import random

from config import AI_AGENT_VIRTUAL_ID, AI_AGENT_REAL_ID
from emotions.models import emotion_model, EMOTIONS, EMOTION_INDEX
from moral_schemas.schemas import MORAL_SCHEMAS
from utils.gpt_client import generate_action_text


class MoralSchemaManager:
    def __init__(self):
        self.active_schemas: Dict[Tuple[int, ...], str] = {}
    
    def get_all_user_pairs(self, virtual_ids: List[int]) -> List[Tuple[int, int]]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ ID)"""
        pairs = []
        
        for i, user1 in enumerate(virtual_ids):
            for user2 in virtual_ids[i+1:]:
                pairs.append((user1, user2))
                pairs.append((user2, user1))
        
        return pairs
    
    def map_participants_to_roles(self, user_pair: Tuple[int, int], schema: dict) -> Optional[Dict[str, int]]:
        """–°–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—è–º–∏ –≤ —Å—Ö–µ–º–µ"""
        roles = schema["participant_roles"]
        
        if len(roles) == 2 and len(user_pair) == 2:
            return {roles[0]: user_pair[0], roles[1]: user_pair[1]}
        
        return None
    
    def check_schema_conditions(self, schema: dict, participant_map: Dict[str, int]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ö–µ–º—ã (–∏—Å–ø–æ–ª—å–∑—É—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ ID)"""
        conditions = schema["conditions"]
        roles = schema["participant_roles"]

        print(f"\nüîí [ADMIN] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π —Å—Ö–µ–º—ã '{schema['name']}'")
        print(f"üîí [ADMIN] –£—á–∞—Å—Ç–Ω–∏–∫–∏ (–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ ID): {participant_map}")

        for condition_key, required_emotions in conditions.items():
            from_role = None
            to_role = None
            
            for role in roles:
                if condition_key.startswith(role + "_to_"):
                    from_role = role
                    to_role_part = condition_key[len(role) + 4:]
                    
                    for r in roles:
                        if to_role_part == r or to_role_part.startswith(r):
                            to_role = r
                            break
                    break
            
            if not from_role or not to_role:
                print(f"üîí [ADMIN]   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —É—Å–ª–æ–≤–∏–µ: {condition_key}")
                return False
            
            if from_role not in participant_map or to_role not in participant_map:
                print(f"üîí [ADMIN]   ‚ö†Ô∏è –†–æ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {from_role}, {to_role}")
                return False
            
            from_virtual_id = participant_map[from_role]
            to_virtual_id = participant_map[to_role]
            
            from_rel = emotion_model.get_relation(from_virtual_id, to_virtual_id)
            
            print(f"üîí [ADMIN]   –ü—Ä–æ–≤–µ—Ä–∫–∞: {from_role}(v{from_virtual_id}) ‚Üí {to_role}(v{to_virtual_id})")
            
            for emotion_name, threshold in required_emotions:
                if emotion_name not in EMOTION_INDEX:
                    print(f"üîí [ADMIN]     ‚ö†Ô∏è –≠–º–æ—Ü–∏—è '{emotion_name}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
                    return False
                
                idx = EMOTION_INDEX[emotion_name]
                current_value = from_rel[idx]
                
                if threshold < 0:
                    if current_value > threshold:
                        print(f"üîí [ADMIN]     ‚ùå {emotion_name}: {current_value:.1f} > {threshold}")
                        return False
                    print(f"üîí [ADMIN]     ‚úÖ {emotion_name}: {current_value:.1f} <= {threshold}")
                else:
                    if current_value < threshold:
                        print(f"üîí [ADMIN]     ‚ùå {emotion_name}: {current_value:.1f} < {threshold}")
                        return False
                    print(f"üîí [ADMIN]     ‚úÖ {emotion_name}: {current_value:.1f} >= {threshold}")
        
        print(f"üîí [ADMIN] ‚úÖ –í–°–ï —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
        return True
    
    def select_best_action(self, schema: dict, participant_map: Dict[str, int]) -> Optional[str]:
        """–í—ã–±—Ä–∞—Ç—å –ª—É—á—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"""
        actions = schema["actions"]
        target_state = schema.get("target_state", {})
        
        if not target_state:
            return random.choice(list(actions.keys()))
        
        roles = list(participant_map.keys())
        author_role = roles[0]
        target_role = roles[1] if len(roles) > 1 else roles[0]
        
        author_id = participant_map[author_role]
        target_id = participant_map[target_role]
        
        best_action = None
        best_impact = -1
        
        for action_key, action in actions.items():
            impact = self._calculate_action_impact(
                action, author_id, target_id, target_state, author_role, target_role
            )
            
            if impact > best_impact:
                best_impact = impact
                best_action = action_key
        
        if best_action is None:
            best_action = random.choice(list(actions.keys()))
        
        return best_action
    
    def _calculate_action_impact(self, action: dict, author_id: int, target_id: int,
                                 target_state: dict, author_role: str, target_role: str) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–ª–∏—è–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ —Ü–µ–ª–µ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        author_delta = action.get("author_delta", {})
        target_delta = action.get("target_delta", {})
        
        impact = 0
        
        if author_role in target_state:
            current_rel = emotion_model.get_relation(author_id, target_id)
            target_emotions = target_state[author_role]
            
            for emotion, target_value in target_emotions.items():
                if emotion in EMOTION_INDEX and emotion in author_delta:
                    idx = EMOTION_INDEX[emotion]
                    current_value = current_rel[idx]
                    new_value = current_value + author_delta[emotion]
                    
                    old_distance = abs(target_value - current_value)
                    new_distance = abs(target_value - new_value)
                    
                    if new_distance < old_distance:
                        impact += (old_distance - new_distance)
        
        if target_role in target_state:
            current_rel = emotion_model.get_relation(target_id, author_id)
            target_emotions = target_state[target_role]
            
            for emotion, target_value in target_emotions.items():
                if emotion in EMOTION_INDEX and emotion in target_delta:
                    idx = EMOTION_INDEX[emotion]
                    current_value = current_rel[idx]
                    new_value = current_value + target_delta[emotion]
                    
                    old_distance = abs(target_value - current_value)
                    new_distance = abs(target_value - new_value)
                    
                    if new_distance < old_distance:
                        impact += (old_distance - new_distance)
        
        return max(impact, 0)
    
    async def execute_schema_action(self, schema_key: str, participant_map: Dict[str, int],
                                   action_key: str, all_participants: List[Dict], bot: Bot) -> bool:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ —Å—Ö–µ–º—ã –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —á–∞—Ç"""
        schema = MORAL_SCHEMAS[schema_key]
        action = schema["actions"][action_key]
        
        roles = list(participant_map.keys())
        author_role = roles[0]
        target_role = roles[1] if len(roles) > 1 else roles[0]
        
        author_virtual_id = participant_map[author_role]
        target_virtual_id = participant_map[target_role]
        
        # –ï–°–õ–ò –ê–ì–ï–ù–¢ –£–ß–ê–°–¢–ù–ò–ö –°–•–ï–ú–´ - –ì–ï–ù–ï–†–ò–†–£–ï–ú –°–û–û–ë–©–ï–ù–ò–ï
        if author_virtual_id == AI_AGENT_VIRTUAL_ID:
            print(f"üîí [ADMIN] ü§ñ –ê–≥–µ–Ω—Ç (v{AI_AGENT_VIRTUAL_ID}) —É—á–∞—Å—Ç–Ω–∏–∫ —Å—Ö–µ–º—ã - –≥–µ–Ω–µ—Ä–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ")
            
            context = f"–°—Ö–µ–º–∞ '{schema['name']}': {schema['description']}"
            action_text = await generate_action_text(
                action_key,
                action["description"],
                context
            )
            
            if action_text:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –∞–≥–µ–Ω—Ç–∞ –≤–æ –≤—Å–µ –ª–∏—á–Ω—ã–µ —á–∞—Ç—ã
                message_text = f"üí¨ [ID {AI_AGENT_VIRTUAL_ID}]: {action_text}"
                
                for participant in all_participants:
                    if participant["virtual_id"] != AI_AGENT_VIRTUAL_ID:
                        try:
                            await bot.send_message(participant["telegram_id"], message_text)
                        except Exception as e:
                            print(f"üîí [ADMIN] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫—É {participant['telegram_id']}: {e}")
                
                print(f"üîí [ADMIN] ‚úÖ –ê–≥–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–∏–ª '{action_key}': {action_text[:50]}...")
        else:
            print(f"üîí [ADMIN] üë• –°—Ö–µ–º–∞ –º–µ–∂–¥—É –ª—é–¥—å–º–∏ - —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ ID)
        self._apply_action_effects(author_virtual_id, target_virtual_id, action)
        
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å—Ö–µ–º—É
        schema_key_tuple = tuple(sorted([author_virtual_id, target_virtual_id]))
        self.active_schemas[schema_key_tuple] = schema_key
        
        return True
    
    def _apply_action_effects(self, author_virtual_id: int, target_virtual_id: int, action: dict):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–µ–π—Å—Ç–≤–∏—è (–∏—Å–ø–æ–ª—å–∑—É—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ ID)"""
        author_delta = action.get("author_delta", {})
        target_delta = action.get("target_delta", {})
        
        if author_delta:
            delta_vector = np.zeros(len(EMOTIONS))
            for emotion, value in author_delta.items():
                if emotion in EMOTION_INDEX:
                    delta_vector[EMOTION_INDEX[emotion]] = value
            emotion_model.update_relation(author_virtual_id, target_virtual_id, delta_vector.tolist())
        
        if target_delta:
            delta_vector = np.zeros(len(EMOTIONS))
            for emotion, value in target_delta.items():
                if emotion in EMOTION_INDEX:
                    delta_vector[EMOTION_INDEX[emotion]] = value
            emotion_model.update_relation(target_virtual_id, author_virtual_id, delta_vector.tolist())
    
    async def check_and_activate_schemas(self, virtual_ids: List[int], 
                                        all_participants: List[Dict], bot: Bot) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å—Ö–µ–º—ã (–∏—Å–ø–æ–ª—å–∑—É—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ ID)
        
        Returns:
            bool: True –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Å—Ö–µ–º–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞
        """
        print(f"üîí [ADMIN] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º –¥–ª—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö ID: {virtual_ids}")
        
        user_pairs = self.get_all_user_pairs(virtual_ids)
        
        schemas_by_priority = sorted(
            MORAL_SCHEMAS.items(),
            key=lambda x: x[1].get("priority", 0),
            reverse=True
        )
        
        for schema_key, schema in schemas_by_priority:
            for user_pair in user_pairs:
                participant_map = self.map_participants_to_roles(user_pair, schema)
                if not participant_map:
                    continue
                
                if self.check_schema_conditions(schema, participant_map):
                    print(f"üîí [ADMIN] ‚úÖ –°—Ö–µ–º–∞ '{schema['name']}' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö ID {user_pair}!")
                    
                    best_action = self.select_best_action(schema, participant_map)
                    if best_action:
                        await self.execute_schema_action(schema_key, participant_map, best_action, 
                                                        all_participants, bot)
                        return True
        
        return False
    
    def print_active_schemas_report(self):
        """–í—ã–≤–µ—Å—Ç–∏ –æ—Ç—á–µ—Ç –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ö–µ–º–∞—Ö"""
        print("\n" + "="*70)
        print("üìã –ê–ö–¢–ò–í–ù–´–ï –ú–û–†–ê–õ–¨–ù–´–ï –°–•–ï–ú–´")
        print("="*70)
        
        if not self.active_schemas:
            print("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ö–µ–º")
            return
        
        for (user1, user2), schema_key in self.active_schemas.items():
            schema = MORAL_SCHEMAS.get(schema_key, {})
            print(f"\n–°—Ö–µ–º–∞: {schema.get('name', schema_key)}")
            print(f"–£—á–∞—Å—Ç–Ω–∏–∫–∏ (–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ ID): {user1} ‚Üî {user2}")
            print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {schema.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")
        
        print("="*70 + "\n")
