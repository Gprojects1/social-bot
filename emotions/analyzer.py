import numpy as np
import json
from typing import Optional, Dict, List
from utils.gpt_client import gpt_request
from .models import EMOTIONS, EMOTION_INDEX


async def analyze_emotion_vector(message_text: str) -> np.ndarray:
    """–ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–±—â–∏–π)"""
    system_prompt = f"""–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —ç–º–æ—Ü–∏–π. 
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Ä–∞–∑–ª–æ–∂–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≤–µ–∫—Ç–æ—Ä—É —ç–º–æ—Ü–∏–π.
–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–º–æ—Ü–∏–∏: {', '.join(EMOTIONS)}
–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ: {{"emotion_name": value}}, –≥–¥–µ value –æ—Ç -30 –¥–æ 30.
–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–∑–Ω–∞—á–∞—é—Ç –Ω–∞–ª–∏—á–∏–µ —ç–º–æ—Ü–∏–∏, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ - –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é —ç–º–æ—Ü–∏—é.
–ù–ï –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, —Ç–æ–ª—å–∫–æ JSON."""
    
    prompt = f'–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç–º–æ—Ü–∏–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: "{message_text}"'
    
    response = await gpt_request(prompt, system_prompt)
    
    if not response:
        print("GPT –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ —ç–º–æ—Ü–∏–∏")
        vector = np.zeros(len(EMOTIONS))
        vector[EMOTION_INDEX["Open"]] = 10
        vector[EMOTION_INDEX["Respectful"]] = 5
        return vector
    
    try:
        json_start = response.find('{')
        json_end = response.rfind('}') + 1
        
        if json_start == -1 or json_end <= json_start:
            print(f"JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ: {response}")
            return np.zeros(len(EMOTIONS))
        
        json_str = response[json_start:json_end]
        emotion_dict = json.loads(json_str)
        
        vector = np.zeros(len(EMOTIONS))
        for emotion, value in emotion_dict.items():
            if emotion in EMOTION_INDEX:
                vector[EMOTION_INDEX[emotion]] = float(value)
        
        print(f"Parsed emotion vector: {dict(zip(EMOTIONS, vector))}")
        return vector
        
    except json.JSONDecodeError as e:
        print(f"Error parsing JSON: {e}")
        print(f"Response was: {response}")
    except Exception as e:
        print(f"Error parsing emotion vector: {type(e).__name__}: {e}")
    
    return np.zeros(len(EMOTIONS))


async def analyze_emotions_per_target(message_text: str, mentioned_ids: List[int]) -> Dict[int, np.ndarray]:
    """
    –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–ø–æ–º—è–Ω—É—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    
    Args:
        message_text: –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        mentioned_ids: –°–ø–∏—Å–æ–∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö ID —É–ø–æ–º—è–Ω—É—Ç—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å {target_id: emotion_vector}
    """
    if not mentioned_ids:
        return {}
    
    # –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π system prompt
    system_prompt = f"""–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —ç–º–æ—Ü–∏–π –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞ –∫ –ö–ê–ñ–î–û–ú–£ —É–ø–æ–º—è–Ω—É—Ç–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É.

–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–º–æ—Ü–∏–∏: {', '.join(EMOTIONS)}

–í–ê–ñ–ù–û: –î–∞–∂–µ –µ—Å–ª–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ, —Ç—ã –û–ë–Ø–ó–ê–ù —É–∫–∞–∑–∞—Ç—å —ç–º–æ—Ü–∏–∏!

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
{{
  "id_number": {{"Emotion1": 25, "Emotion2": 30, "Emotion3": 28}},
  "id_number": {{"Emotion4": 20, "Emotion5": 22}}
}}

–≥–¥–µ –∫–ª—é—á - —ç—Ç–æ –Ω–æ–º–µ—Ä ID (–±–µ–∑ "id"), –∞ –∑–Ω–∞—á–µ–Ω–∏—è - —ç–º–æ—Ü–∏–∏ –æ—Ç -30 –¥–æ 30.
–ù–ï –¥–æ–±–∞–≤–ª—è–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞ –≤–Ω–µ JSON!"""
    
    # –°–æ–∑–¥–∞—ë–º –±–æ–ª–µ–µ —è–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    ids_list = ", ".join([f"ID {id}" for id in mentioned_ids])
    prompt = f"""–°–æ–æ–±—â–µ–Ω–∏–µ: "{message_text}"

–£–ø–æ–º—è–Ω—É—Ç—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏: {ids_list}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞ –∫ –ö–ê–ñ–î–û–ú–£ —É—á–∞—Å—Ç–Ω–∏–∫—É:
{chr(10).join([f'- ID {id}: –∫–∞–∫–∏–µ —ç–º–æ—Ü–∏–∏ –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç –∞–≤—Ç–æ—Ä?' for id in mentioned_ids])}

–í–µ—Ä–Ω–∏ JSON —Å –∞–Ω–∞–ª–∏–∑–æ–º –¥–ª—è –ö–ê–ñ–î–û–ì–û ID."""
    
    print(f"üîí [DEBUG] –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ GPT –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
    response = await gpt_request(prompt, system_prompt)
    
    if not response:
        print("üîí [DEBUG] GPT –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
        # Fallback: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—â–∏–µ —ç–º–æ—Ü–∏–∏ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –∫–æ –≤—Å–µ–º
        general_vector = await analyze_emotion_vector(message_text)
        return {target_id: general_vector.copy() for target_id in mentioned_ids}
    
    print(f"üîí [DEBUG] –û—Ç–≤–µ—Ç GPT: {response[:500]}")
    
    try:
        # –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
        json_start = response.find('{')
        json_end = response.rfind('}') + 1
        
        if json_start == -1 or json_end <= json_start:
            print(f"üîí [DEBUG] JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
            general_vector = await analyze_emotion_vector(message_text)
            return {target_id: general_vector.copy() for target_id in mentioned_ids}
        
        json_str = response[json_start:json_end]
        print(f"üîí [DEBUG] –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π JSON: {json_str}")
        
        per_target_dict = json.loads(json_str)
        print(f"üîí [DEBUG] –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å: {per_target_dict}")
        
        result = {}
        
        for target_id in mentioned_ids:
            # –ü—Ä–æ–±—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–ª—é—á–µ–π
            target_key = None
            possible_keys = [
                str(target_id),           # "1"
                f"id{target_id}",         # "id1"
                f"ID{target_id}",         # "ID1"
                f"@id{target_id}",        # "@id1"
                f"participant_{target_id}", # "participant_1"
                int(target_id) if isinstance(target_id, str) else target_id  # —á–∏—Å–ª–æ–≤–æ–π –∫–ª—é—á
            ]
            
            for possible_key in possible_keys:
                if possible_key in per_target_dict:
                    target_key = possible_key
                    print(f"üîí [DEBUG] –ù–∞–π–¥–µ–Ω –∫–ª—é—á '{target_key}' –¥–ª—è ID {target_id}")
                    break
            
            if target_key and isinstance(per_target_dict[target_key], dict):
                # –°–æ–∑–¥–∞—ë–º –≤–µ–∫—Ç–æ—Ä —ç–º–æ—Ü–∏–π –¥–ª—è —ç—Ç–æ–≥–æ target_id
                vector = np.zeros(len(EMOTIONS))
                emotions_found = 0
                
                for emotion, value in per_target_dict[target_key].items():
                    if emotion in EMOTION_INDEX:
                        vector[EMOTION_INDEX[emotion]] = float(value)
                        emotions_found += 1
                        print(f"üîí [DEBUG] ID {target_id}: {emotion} = {value}")
                
                if emotions_found > 0:
                    result[target_id] = vector
                    print(f"üîí [DEBUG] ‚úÖ –î–ª—è ID {target_id} –Ω–∞–π–¥–µ–Ω–æ {emotions_found} —ç–º–æ—Ü–∏–π")
                else:
                    print(f"üîí [DEBUG] ‚ö†Ô∏è –î–ª—è ID {target_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —ç–º–æ—Ü–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑")
                    result[target_id] = await analyze_emotion_vector(message_text)
            else:
                print(f"üîí [DEBUG] ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–º–æ—Ü–∏–∏ –¥–ª—è ID {target_id} (–∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω), –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑")
                result[target_id] = await analyze_emotion_vector(message_text)
        
        # –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–ª—è –≤—Å–µ—Ö ID –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for target_id in mentioned_ids:
            if target_id not in result:
                print(f"üîí [DEBUG] ‚ö†Ô∏è ID {target_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑")
                result[target_id] = await analyze_emotion_vector(message_text)
        
        return result
        
    except json.JSONDecodeError as e:
        print(f"üîí [DEBUG] Error parsing JSON: {e}")
        print(f"üîí [DEBUG] Response was: {response}")
    except Exception as e:
        print(f"üîí [DEBUG] Error in contextual analysis: {type(e).__name__}: {e}")
        import traceback
        traceback.print_exc()
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π fallback
    print(f"üîí [DEBUG] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π fallback - –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –≤—Å–µ—Ö")
    general_vector = await analyze_emotion_vector(message_text)
    return {target_id: general_vector.copy() for target_id in mentioned_ids}
