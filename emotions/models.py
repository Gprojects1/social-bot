import numpy as np
from typing import Dict, Tuple, List

EMOTIONS = [
    "Trusting", "Kind-hearted", "Enthusiastic", "Respectful", "Supportive",
    "Confident", "Responsible", "Bold", "Open", "Eager to learn",
    "Sincere", "Encouraging", "Vulnerable", "Praiseworthy", "Goal-oriented",
    "Inspiring", "Mocking", "Disrespectful", "Distrustful", "Confrontational",
    "Unkind", "Insecure", "Serious", "Amused", "Resilient", "Determined",
    "Loyal", "Competitive", "Humble", "Prideful", "Empathetic", "Indifferent",
    "Curious", "Defensive", "Cooperative", "Playful", "Cautious", "Friendly"
]

EMOTION_INDEX = {emotion: i for i, emotion in enumerate(EMOTIONS)}

class EmotionModel:
    def __init__(self):
        self.relations: Dict[Tuple[int, int], np.ndarray] = {}
    
    def get_relation(self, from_id: int, to_id: int) -> np.ndarray:
        """–ü–æ–ª—É—á–∏—Ç—å –≤–µ–∫—Ç–æ—Ä –æ—Ç–Ω–æ—à–µ–Ω–∏–π"""
        key = (from_id, to_id)
        if key not in self.relations:
            self.relations[key] = np.zeros(len(EMOTIONS))
        return self.relations[key]
    
    def update_relation(self, from_id: int, to_id: int, delta: list) -> np.ndarray:
        """–û–±–Ω–æ–≤–∏—Ç—å –≤–µ–∫—Ç–æ—Ä –æ—Ç–Ω–æ—à–µ–Ω–∏–π"""
        rel = self.get_relation(from_id, to_id)
        delta_array = np.array(delta)
        rel += delta_array
        self.relations[(from_id, to_id)] = rel
        return rel
    
    def reset_relations(self, user_id: int):
        """–°–±—Ä–æ—Å–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        keys_to_remove = []
        for (from_id, to_id) in self.relations.keys():
            if from_id == user_id or to_id == user_id:
                keys_to_remove.append((from_id, to_id))
        
        for key in keys_to_remove:
            self.relations.pop(key, None)
    
    def get_all_relations_for_user(self, user_id: int) -> List[tuple]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        user_relations = []
        for (from_id, to_id), vector in self.relations.items():
            if from_id == user_id or to_id == user_id:
                user_relations.append((from_id, to_id, vector))
        return user_relations
    
    def get_relation_strength(self, from_id: int, to_id: int) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å–∏–ª—É –æ—Ç–Ω–æ—à–µ–Ω–∏–π (–Ω–æ—Ä–º–∞ –≤–µ–∫—Ç–æ—Ä–∞)"""
        rel = self.get_relation(from_id, to_id)
        return np.linalg.norm(rel)
    
    def print_relations_report(self):
        """–ù–∞–ø–µ—á–∞—Ç–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ–± –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        print("\n" + "="*50)
        print("üîí [ADMIN] –ü–û–õ–ù–´–ô –û–¢–ß–ï–¢ –û–¢–ù–û–®–ï–ù–ò–ô")
        print("="*50)
        
        if not self.relations:
            print("üîí [ADMIN] –ü–æ–∫–∞ –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π")
            return
        
        for (from_id, to_id), vector in self.relations.items():
            from_name = "ü§ñ –ê–≥–µ–Ω—Ç" if from_id == -1 else f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫ {from_id}"
            to_name = "ü§ñ –ê–≥–µ–Ω—Ç" if to_id == -1 else f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫ {to_id}"
            
            strong_emotions = []
            for i, value in enumerate(vector):
                if abs(value) > 10:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–∏–ª—å–Ω—ã–µ —ç–º–æ—Ü–∏–∏
                    emotion_name = EMOTIONS[i]
                    strong_emotions.append(f"{emotion_name}: {value:.1f}")
            
            if strong_emotions:
                print(f"{from_name} -> {to_name}:")
                print(f"  {', '.join(strong_emotions)}")
            else:
                print(f"{from_name} -> {to_name}: (–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ)")
        
        print("="*50)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥–µ–ª–∏ —ç–º–æ—Ü–∏–π
emotion_model = EmotionModel()