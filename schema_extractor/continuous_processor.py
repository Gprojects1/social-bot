import asyncio
import signal
import os
from datetime import datetime
from schema_extractor.web_loader import WebContentLoader
from schema_extractor.extractor import MoralSchemaExtractor


class ContinuousSchemaExtractor:
    """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –º–æ—Ä–∞–ª—å–Ω—ã—Ö —Å—Ö–µ–º"""
    
    def __init__(self, 
                 output_file: str = "moral_schemas/schemas.py",
                 backup_file: str = "moral_schemas/schemas_auto.py"):
        self.loader = WebContentLoader()
        self.extractor = MoralSchemaExtractor()
        self.output_file = output_file
        self.backup_file = backup_file
        
        self.all_schemas = {}
        self.books_processed = 0
        self.schemas_found = 0
        self.running = True
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ö–µ–º—ã
        self._load_existing_schemas()
        
        signal.signal(signal.SIGINT, self._signal_handler)
    
    def _load_existing_schemas(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ö–µ–º—ã –∏–∑ —Ñ–∞–π–ª–∞"""
        if os.path.exists(self.output_file):
            try:
                import importlib.util
                spec = importlib.util.spec_from_file_location("schemas", self.output_file)
                module = importlib.util.module_from_spec(spec)
                spec.loader.exec_module(module)
                
                if hasattr(module, 'MORAL_SCHEMAS'):
                    self.all_schemas = dict(module.MORAL_SCHEMAS)
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ö–µ–º: {len(self.all_schemas)}")
            except Exception as e:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ö–µ–º—ã: {e}")
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+C"""
        print("\n\n‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        self.running = False
    
    async def process_one_book(self):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–Ω—É –∫–Ω–∏–≥—É"""
        result = await self.loader.fetch_random_book()
        
        if not result:
            print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–Ω–∏–≥—É, –ø—Ä–æ–±—É—é –µ—â—ë...")
            await asyncio.sleep(5)
            return
        
        book_id, text, title = result
        self.books_processed += 1
        
        print(f"\n{'='*70}")
        print(f"üìñ [{self.books_processed}] {title} (ID: {book_id})")
        print(f"{'='*70}")
        
        chunks = [text[i:i+3000] for i in range(0, min(len(text), 9000), 3000)]
        
        new_schemas_count = 0
        
        for i, chunk in enumerate(chunks, 1):
            print(f"  üìÑ –§—Ä–∞–≥–º–µ–Ω—Ç {i}/{len(chunks)}...")
            
            schemas = await self.extractor.extract_schemas_from_text(chunk, title)
            
            if schemas:
                for schema in schemas:
                    key = schema.get('schema_key', self.extractor._generate_key(schema.get('name', '')))
                    schema['schema_key'] = key
                    
                    if key not in self.all_schemas:
                        self.all_schemas[key] = schema
                        new_schemas_count += 1
                        self.schemas_found += 1
                        print(f"    ‚úÖ –ù–æ–≤–∞—è: {schema.get('name')}")
            
            await asyncio.sleep(2)
        
        if new_schemas_count > 0:
            print(f"\n  üìä –ù–æ–≤—ã—Ö —Å—Ö–µ–º: {new_schemas_count}")
            self._save_progress()
        else:
            print(f"\n  ‚ö†Ô∏è  –ù–æ–≤—ã—Ö —Å—Ö–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        self._print_stats()
    
    def _save_progress(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å"""
        schemas_list = list(self.all_schemas.values())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
        self.extractor.save_schemas_to_file(schemas_list, self.output_file)
        print(f"  üíæ –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª: {self.output_file}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—ç–∫–∞–ø
        self.extractor.save_schemas_to_file(schemas_list, self.backup_file)
        print(f"  üíæ –ë—ç–∫–∞–ø: {self.backup_file}")
    
    def _print_stats(self):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        print(f"\n  üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.books_processed} –∫–Ω–∏–≥ | –°—Ö–µ–º: {len(self.all_schemas)}")
    
    async def run(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª"""
        print("\n" + "="*70)
        print("üîÑ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –≠–ö–°–¢–†–ê–ö–¢–û–† –ú–û–†–ê–õ–¨–ù–´–• –°–•–ï–ú")
        print("="*70)
        print("üìö –ò—Å—Ç–æ—á–Ω–∏–∫: Project Gutenberg (70000+ –∫–Ω–∏–≥)")
        print("ü§ñ –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –¥–æ –Ω–∞–∂–∞—Ç–∏—è Ctrl+C")
        print(f"üíæ –§–∞–π–ª —Å—Ö–µ–º: {self.output_file}")
        print(f"üíæ –ë—ç–∫–∞–ø: {self.backup_file}")
        print("="*70)
        
        start_time = datetime.now()
        
        while self.running:
            try:
                await self.process_one_book()
                
                if self.running:
                    print(f"\n‚è≥ –ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(5)
            
            except Exception as e:
                print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
                await asyncio.sleep(10)
        
        # –§–∏–Ω–∞–ª
        print("\n" + "="*70)
        print("üõë –ó–ê–í–ï–†–®–ï–ù–ò–ï –†–ê–ë–û–¢–´")
        print("="*70)
        
        if self.all_schemas:
            self._save_progress()
        
        duration = datetime.now() - start_time
        hours = duration.total_seconds() / 3600
        
        print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {hours:.2f} —á–∞—Å–æ–≤")
        print(f"   üìö –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–Ω–∏–≥: {self.books_processed}")
        print(f"   ‚ú® –ù–∞–π–¥–µ–Ω–æ —Å—Ö–µ–º: {self.schemas_found}")
        print(f"   üéØ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ö–µ–º: {len(self.all_schemas)}")
        
        if self.all_schemas:
            print(f"\nüìã –¢–û–ü-10 –°–•–ï–ú:")
            for i, (key, schema) in enumerate(list(self.all_schemas.items())[:10], 1):
                print(f"   {i}. {schema.get('name')} ({key})")
        
        print(f"\n‚úÖ –°—Ö–µ–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:")
        print(f"   ‚Ä¢ {self.output_file}")
        print(f"   ‚Ä¢ {self.backup_file}")
        print("\nüëã –ì–æ—Ç–æ–≤–æ!")


async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    print("\nüéØ –†–ï–ñ–ò–ú –†–ê–ë–û–¢–´:")
    print("1 - –î–æ–±–∞–≤–ª—è—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª (schemas.py) - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ—Ç–æ–º")
    print("2 - –°–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª (schemas_auto.py)")
    
    choice = input("\nüëâ –í–∞—à –≤—ã–±–æ—Ä (Enter = 1): ").strip() or "1"
    
    if choice == "1":
        extractor = ContinuousSchemaExtractor(
            output_file="moral_schemas/schemas.py",
            backup_file="moral_schemas/schemas_backup.py"
        )
    else:
        extractor = ContinuousSchemaExtractor(
            output_file="moral_schemas/schemas_auto.py",
            backup_file="moral_schemas/schemas_backup.py"
        )
    
    await extractor.run()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\nüëã –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
